/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Vmal0Service } from "../vmal0.service";
import { Vmal0CreateInput } from "./Vmal0CreateInput";
import { Vmal0 } from "./Vmal0";
import { Vmal0FindManyArgs } from "./Vmal0FindManyArgs";
import { Vmal0WhereUniqueInput } from "./Vmal0WhereUniqueInput";
import { Vmal0UpdateInput } from "./Vmal0UpdateInput";

export class Vmal0ControllerBase {
  constructor(protected readonly service: Vmal0Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vmal0 })
  async createVmal0(@common.Body() data: Vmal0CreateInput): Promise<Vmal0> {
    return await this.service.createVmal0({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vmal0] })
  @ApiNestedQuery(Vmal0FindManyArgs)
  async vmal0s(@common.Req() request: Request): Promise<Vmal0[]> {
    const args = plainToClass(Vmal0FindManyArgs, request.query);
    return this.service.vmal0s({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vmal0 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vmal0(
    @common.Param() params: Vmal0WhereUniqueInput
  ): Promise<Vmal0 | null> {
    const result = await this.service.vmal0({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vmal0 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVmal0(
    @common.Param() params: Vmal0WhereUniqueInput,
    @common.Body() data: Vmal0UpdateInput
  ): Promise<Vmal0 | null> {
    try {
      return await this.service.updateVmal0({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vmal0 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVmal0(
    @common.Param() params: Vmal0WhereUniqueInput
  ): Promise<Vmal0 | null> {
    try {
      return await this.service.deleteVmal0({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
