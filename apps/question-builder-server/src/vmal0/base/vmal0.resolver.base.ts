/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Vmal0 } from "./Vmal0";
import { Vmal0CountArgs } from "./Vmal0CountArgs";
import { Vmal0FindManyArgs } from "./Vmal0FindManyArgs";
import { Vmal0FindUniqueArgs } from "./Vmal0FindUniqueArgs";
import { DeleteVmal0Args } from "./DeleteVmal0Args";
import { Vmal0Service } from "../vmal0.service";
@graphql.Resolver(() => Vmal0)
export class Vmal0ResolverBase {
  constructor(protected readonly service: Vmal0Service) {}

  async _vmal0sMeta(
    @graphql.Args() args: Vmal0CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Vmal0])
  async vmal0s(@graphql.Args() args: Vmal0FindManyArgs): Promise<Vmal0[]> {
    return this.service.vmal0s(args);
  }

  @graphql.Query(() => Vmal0, { nullable: true })
  async vmal0(
    @graphql.Args() args: Vmal0FindUniqueArgs
  ): Promise<Vmal0 | null> {
    const result = await this.service.vmal0(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vmal0)
  async deleteVmal0(
    @graphql.Args() args: DeleteVmal0Args
  ): Promise<Vmal0 | null> {
    try {
      return await this.service.deleteVmal0(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
